#Java内存区域
## 运行时数据区域
### 程序计数器
程序计数器是一块较小的内存空间,它可以看作是**当前线程所执行的字节码的行号指示器**,  
虚拟机的概念模型里,字节码解释器就是通过改变这个计数器的值来选取下一条需要执行的字节码指令.  
为了线程切换后能回到恢复到正确的执行位置,每条线程都需要有一个独立的程序计数器,各条线程之间计数器互不影响,独立存储,这类内存区域称为"线程私有"的内存.  
> * thread执行java方法 -- 计数器记录正在执行的虚拟机字节码指令的地址
> * native方法   --  计数器值为空  此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError的区域.

### Java虚拟机栈 
也是线程私有的,生命周期和线程相同.它描述的是**Java方法执行的内存模型**:每个方法在执行的时候都会创建一个栈帧用于存储局部变量表,操作数栈,动态链接,
方法出口等信息.  
局部变量表存放各种编译器可知的xx,局部变量表所需的内存空间在编译期间完成分配(两种异常StackOverflowError和OutOfMemoryError)  

### 本地方法栈  
与虚拟机栈类似,但本地方法栈是为虚拟机使用到的native方法服务的.  

### Java堆
对大多数应用来说,Java堆是Java虚拟机所管理的内存中最大的一块.**被所有线程共享**,在虚拟机启动时创建.此内存区域的唯一目的就是存放对象实例,
几乎所有对象实例和数组都在堆上分配.   
Java堆是垃圾收集器管理的主要区域,因此很多时候被称为"GC堆",Java堆可以处于物理上不连续的内存空间中,只要逻辑上是连续的即可.  

### 方法区
各线程共享的内存区域,用于存放被虚拟机加载的类信息,常量,静态变量,即时编译后的代码等数据.  也叫永久代.  该区域的回收目标主要为正对常量池的回收和对类型的卸载.

### 运行时常量池  
方法区的一部分,Class文件中除了有类的各种描述信息外,还有一项信息是常量池,用于存放编译器生成的各种字面量和符号引用(一般还有翻译出来的直接引用),这部分内容将在类加载后进入方法区的运行时常量池存放.
相对于Class文件常量池:具备动态性,运行期间能将新的常量放入池中
 
### 直接内存  
堆外内存  NIO
